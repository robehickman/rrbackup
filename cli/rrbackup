#!/usr/bin/python
import sys, os, dateutil, pprint, json, copy, pysodium
import rrbackup.fsutil as sfs
import rrbackup.core as core
import rrbackup.pipeline as pipeline
import rrbackup.s3_interface as interface

import collections

if not pysodium.sodium_version_check(1, 0, 15): raise SystemExit('Requires libsodium >= 1.0.15')
args = copy.deepcopy(sys.argv); args.pop(0)

#++++++++++++++++++++++++
if len(sys.argv) > 1 and (sys.argv[1] == '-h' or sys.argv[1] == '--help'):
    print """
Robert's Remote Backup, backup a directory with change history.

Prefix arguments:
-h                                                 - Display this help notice
--c [path to conf file]                            - Specify an alternate path to the configuration

Positional arguments:
[none]                                             - run backup from configuration file
list_versions                                      - List all versions
list_files    [version_id]                         - List all files in a version
list_changes  [version_id]                         - List what has changed in the named version
download      [version id]  [target] [filter file] - Download a file or files from the backup, creates
                                                    target directory if it does not exist. Filter file
                                                    specifies files that should not be downloaded, one
                                                    per line and unix wildcards are supported """
else:

    # Assemble default configuration
    config = core.default_config(interface)

    # Read and merge configuration file
    conf_file = 'configuration.json'
    if len(args) > 0 and args[0] == '--c':
        if len(args) < 2: raise SystemExit('Expected argument following --c to be a path to configuration file, nothing found.')
        args.pop(0); conf_file = args.pop(0)

    parsed_config = json.loads(sfs.file_get_contents(conf_file))
    core.validate_config(parsed_config)

    config = core.merge_config(config, parsed_config)

    # Setup the interface and core
    conn = interface.connect(config)
    config = pipeline.preprocess_config(interface, conn, config)
    core.init(interface, conn, config)

    #++++++++++++++++++++++++
    if len(args) == 0:
        print 'Running backup'
        core.backup(interface, conn, config)

    #++++++++++++++++++++++++
    elif args[0] == 'list_versions':
        if 'write_only' in config and config['write_only'] == True: raise Exception('write only')

        versions = core.get_remote_manifest_versions(interface, conn, config)
        print '\nDate and time         : Version ID\n'
        for vers in versions:
            timestr = vers['LastModified'].strftime('%d %b %Y %X')
            print timestr + ' : ' + vers['VersionId']
        print

    #++++++++++++++++++++++++
    elif args[0] == 'list_files':
        if 'write_only' in config and config['write_only'] == True: raise Exception('write only')

        if len(args) < 2:
            print "You must provide a Version ID, see help (-h)"; quit()

        versions = core.get_remote_manifest_diffs(interface, conn, config)

        manifest = core.rebuild_manifest_from_diffs(versions, args[1])

        manifest['files'] = sorted(manifest['files'], key=lambda fle:
            (os.path.dirname(fle['path']), os.path.basename(fle['path'])))

        print
        for fle in manifest['files']:
            print fle['path']
        print

    #++++++++++++++++++++++++
    elif args[0] == 'list_changes':
        if 'write_only' in config and config['write_only'] == True: raise Exception('write only')

        if len(args) < 2:
            print "You must provide a Version ID, see help (-h)"; quit()

        diff = core.get_remote_manifest_diff(interface, conn, config, args[1])['body']

        print
        for change in diff:
            if change['status'] == 'moved':
                print change['status'].capitalize() + ': ' + change['moved_from']
                print '   To: ' + change['path']
            else:
                print change['status'].capitalize() + ': ' + change['path']
        print


    #++++++++++++++++++++++++
    elif args[0] == 'download':
        if len(args) < 2:
            print "You must provide a Version ID, see help (-h)"; quit()

        if len(args) < 3:
            print "You must provide a target directory, see help (-h)"; quit()

        ignore_filters = None
        if len(args) > 3:
            ignore_filters = sfs.file_get_contents(args[3])
            ignore_filters = ignore_filters.splitlines()
            
        core.download(interface, conn, config, args[1], args[2], ignore_filters)

    else:
        print 'Unknown command'
