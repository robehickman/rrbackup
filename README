Robert's remote backup (rrbackup) is a system for backing up a directory with version history. Files can be stored encrypted using libsodium and files are grouped into atomic commits. The remote is never left in an inconsistent state, a feature I consider essential for a backup system. Currently S3 is the only backed supported. Files are stored as versioned S3 objects thus it is easy to recover only part of a backup, another feature I consider essential.  

Amazon S3 has object versioning but cannot group a set of objects as an atomic commit, this functionality is achieved by referencing all files from a central manifest, which is stored as a progression of diffs. If a file 'foo' is added this creates a manifest diff 'file foo was added'. The files are uploaded first and manifest last, as only the files referenced in the manifest are considered to exist it can never represent a partial backup. This works sympathetically with S3 object versioning as each of these diffs stored the version ID's of the added objects. Data required to decode the stored objects is maintained as a header, thus they can be recovered even if the manifest is lost or corrupted.

=== Usage ===

Instillation through setup.py creates a system command 'rrbackup'. Create a file 'configuration.ini' in the current working directory, this has the following format:

[main]
base_path:           [absolute path to directory to be backed up]
local_manifest_file: [absolute path to the local manifest cache]
crypt_password:      [encryption password]
commit_locked:       [True/False, allow or disallow commits]

[s3]
access_key: [aws access key]
secret_key: [aws secret key]
bucket:     [aws s3 bucket to use]


If you wish to obfuscate the names of the Remote manifest diffs and remote GC log, and password salt file this can be done by adding the following to the 'main' section of the configuration:

remote_manifest_diff_file: asdfgjkll
remote_gc_log_file:        cvbnmoytety
remote_password_salt_file: qwertyuio


Once this file has been created you can run a backup by running 'rrbackup', the supplied bucket must exist. It will check that the bucket exists and that versioning is enabled, and will enable it if not. The following parameters can be used to list or download versions:

[none]                               - run backup from configuration file
list_versions                        - List all versions
list_files    [version_id]           - List all files in a version
list_changes  [version_id]           - List what has changed in the named version
download      [version id]  [target] - Download a file or files from the backup, creates
                                       target directory if it does not exist


--- Meta pipeline formats

--- Backup pipeline formats

Pipeline formats can be applied differently

Note that the sort order of unix wildcards listed matters, these are evaluated top to bottom against each file so must be least to most specific. For example placing a match all wildcard '*' first will always skip following filters.

Note that filters must always start with a slash '/'

--- Ignore files

Files listed here will not be backed up, this can be useful for cache data which can be recreated. 

If a file is added to the ignore list after it has been backed up previously, the next time backup is run it will be removed from the latest and will not appear in following backups.

---- Skip delete

Sometimes you may want to add a file to a backup, keeping it in the backup but deleting it from the local file system to save space. An example being database snapshots. Such files should be added to 'ignore delete', they will be added when they appear in the filesystem but will not be deleted from the backup when removed.
